<var-decl>
 <type>
  int
 <init-declarator-list>
  <init-declarator>
   <declarator>
    <identifier>
     i
    <declarator-t>
   <init-declarator-t>
  <init-declarator-list-t>
 ;
<var-decl>
 <type>
  int
 <init-declarator-list>
  <init-declarator>
   <declarator>
    <identifier>
     j
    <declarator-t>
   <init-declarator-t>
  <init-declarator-list-t>
 ;
<func-decl>
 <type>
  int
 <identifier>
  gcd
 <para-list>
  (
  <para-list-t>
   <proper-para-list>
   <para-decl>
    <type>
     int
    <declarator>
    <identifier>
     a
    <declarator-t>
   <proper-para-list-t>
   ,
   <para-decl>
    <type>
     int
    <declarator>
    <identifier>
     b
    <declarator-t>
   <proper-para-list-t>
  )
 <compound-stmt>
 {
 <var-decl-list>
 <stmt-list>
  <stmt>
   <if-stmt>
   if
   (
   <expr>
    <assign-expr>
    <cond-or-expr>
     <cond-and-expr>
      <equality-expr>
       <relational-expr>
        <additive-expr>
         <multiplicative-expr>
          <unary-expr>
           <primary-expr>
           <identifier>
            b
           <primary-expr-t>
          <multiplicative-expr-t>
         <additive-expr-t>
        <relational-expr-t>
       <equality-expr-t>
       ==
       <relational-expr>
        <additive-expr>
         <multiplicative-expr>
          <unary-expr>
           <primary-expr>
           0
          <multiplicative-expr-t>
         <additive-expr-t>
        <relational-expr-t>
       <equality-expr-t>
      <cond-and-expr-t>
     <cond-or-expr-t>
    <assign-expr-t>
   )
   <stmt>
    <return-stmt>
    return
    <expr-t>
     <expr>
     <assign-expr>
     <cond-or-expr>
      <cond-and-expr>
       <equality-expr>
        <relational-expr>
         <additive-expr>
          <multiplicative-expr>
           <unary-expr>
            <primary-expr>
            <identifier>
             a
            <primary-expr-t>
           <multiplicative-expr-t>
          <additive-expr-t>
         <relational-expr-t>
        <equality-expr-t>
       <cond-and-expr-t>
      <cond-or-expr-t>
     <assign-expr-t>
    ;
   <else-stmt>
   else
   <stmt>
   <return-stmt>
   return
   <expr-t>
    <expr>
    <assign-expr>
    <cond-or-expr>
     <cond-and-expr>
      <equality-expr>
       <relational-expr>
        <additive-expr>
         <multiplicative-expr>
          <unary-expr>
           <primary-expr>
           <identifier>
            gcd
           <primary-expr-t>
           <arg-list>
           (
           <arg-list-t>
            <proper-arg-list>
            <arg>
             <expr>
             <assign-expr>
             <cond-or-expr>
              <cond-and-expr>
               <equality-expr>
                <relational-expr>
                 <additive-expr>
                  <multiplicative-expr>
                   <unary-expr>
                    <primary-expr>
                    <identifier>
                     b
                    <primary-expr-t>
                   <multiplicative-expr-t>
                  <additive-expr-t>
                 <relational-expr-t>
                <equality-expr-t>
               <cond-and-expr-t>
              <cond-or-expr-t>
             <assign-expr-t>
            <proper-arg-list-t>
            ,
            <arg>
             <expr>
             <assign-expr>
             <cond-or-expr>
              <cond-and-expr>
               <equality-expr>
                <relational-expr>
                 <additive-expr>
                  <multiplicative-expr>
                   <unary-expr>
                    <primary-expr>
                    <identifier>
                     a
                    <primary-expr-t>
                   <multiplicative-expr-t>
                  <additive-expr-t>
                  -
                  <multiplicative-expr>
                   <unary-expr>
                    <primary-expr>
                    (
                    <expr>
                     <assign-expr>
                     <cond-or-expr>
                      <cond-and-expr>
                       <equality-expr>
                        <relational-expr>
                         <additive-expr>
                          <multiplicative-expr>
                           <unary-expr>
                            <primary-expr>
                            <identifier>
                             a
                            <primary-expr-t>
                           <multiplicative-expr-t>
                           /
                           <unary-expr>
                            <primary-expr>
                            <identifier>
                             b
                            <primary-expr-t>
                           <multiplicative-expr-t>
                          <additive-expr-t>
                         <relational-expr-t>
                        <equality-expr-t>
                       <cond-and-expr-t>
                      <cond-or-expr-t>
                     <assign-expr-t>
                    )
                   <multiplicative-expr-t>
                   *
                   <unary-expr>
                    <primary-expr>
                    <identifier>
                     b
                    <primary-expr-t>
                   <multiplicative-expr-t>
                  <additive-expr-t>
                 <relational-expr-t>
                <equality-expr-t>
               <cond-and-expr-t>
              <cond-or-expr-t>
             <assign-expr-t>
            <proper-arg-list-t>
           )
          <multiplicative-expr-t>
         <additive-expr-t>
        <relational-expr-t>
       <equality-expr-t>
      <cond-and-expr-t>
     <cond-or-expr-t>
    <assign-expr-t>
   ;
  <stmt-list>
 }
<func-decl>
 <type>
  void
 <identifier>
  main
 <para-list>
  (
  <para-list-t>
  )
 <compound-stmt>
 {
 <var-decl-list>
 <stmt-list>
  <stmt>
   <expr-stmt>
   <expr>
    <assign-expr>
    <cond-or-expr>
     <cond-and-expr>
      <equality-expr>
       <relational-expr>
        <additive-expr>
         <multiplicative-expr>
          <unary-expr>
           <primary-expr>
           <identifier>
            i
           <primary-expr-t>
          <multiplicative-expr-t>
         <additive-expr-t>
        <relational-expr-t>
       <equality-expr-t>
      <cond-and-expr-t>
     <cond-or-expr-t>
    <assign-expr-t>
    =
    <cond-or-expr>
     <cond-and-expr>
      <equality-expr>
       <relational-expr>
        <additive-expr>
         <multiplicative-expr>
          <unary-expr>
           <primary-expr>
           <identifier>
            getInt
           <primary-expr-t>
           <arg-list>
           (
           <arg-list-t>
           )
          <multiplicative-expr-t>
         <additive-expr-t>
        <relational-expr-t>
       <equality-expr-t>
      <cond-and-expr-t>
     <cond-or-expr-t>
    <assign-expr-t>
   ;
  <stmt-list>
  <stmt>
   <expr-stmt>
   <expr>
    <assign-expr>
    <cond-or-expr>
     <cond-and-expr>
      <equality-expr>
       <relational-expr>
        <additive-expr>
         <multiplicative-expr>
          <unary-expr>
           <primary-expr>
           <identifier>
            j
           <primary-expr-t>
          <multiplicative-expr-t>
         <additive-expr-t>
        <relational-expr-t>
       <equality-expr-t>
      <cond-and-expr-t>
     <cond-or-expr-t>
    <assign-expr-t>
    =
    <cond-or-expr>
     <cond-and-expr>
      <equality-expr>
       <relational-expr>
        <additive-expr>
         <multiplicative-expr>
          <unary-expr>
           <primary-expr>
           <identifier>
            getInt
           <primary-expr-t>
           <arg-list>
           (
           <arg-list-t>
           )
          <multiplicative-expr-t>
         <additive-expr-t>
        <relational-expr-t>
       <equality-expr-t>
      <cond-and-expr-t>
     <cond-or-expr-t>
    <assign-expr-t>
   ;
  <stmt-list>
  <stmt>
   <expr-stmt>
   <expr>
    <assign-expr>
    <cond-or-expr>
     <cond-and-expr>
      <equality-expr>
       <relational-expr>
        <additive-expr>
         <multiplicative-expr>
          <unary-expr>
           <primary-expr>
           <identifier>
            putIntLn
           <primary-expr-t>
           <arg-list>
           (
           <arg-list-t>
            <proper-arg-list>
            <arg>
             <expr>
             <assign-expr>
             <cond-or-expr>
              <cond-and-expr>
               <equality-expr>
                <relational-expr>
                 <additive-expr>
                  <multiplicative-expr>
                   <unary-expr>
                    <primary-expr>
                    <identifier>
                     gcd
                    <primary-expr-t>
                    <arg-list>
                    (
                    <arg-list-t>
                     <proper-arg-list>
                     <arg>
                      <expr>
                      <assign-expr>
                      <cond-or-expr>
                       <cond-and-expr>
                        <equality-expr>
                         <relational-expr>
                          <additive-expr>
                           <multiplicative-expr>
                            <unary-expr>
                             <primary-expr>
                             <identifier>
                              i
                             <primary-expr-t>
                            <multiplicative-expr-t>
                           <additive-expr-t>
                          <relational-expr-t>
                         <equality-expr-t>
                        <cond-and-expr-t>
                       <cond-or-expr-t>
                      <assign-expr-t>
                     <proper-arg-list-t>
                     ,
                     <arg>
                      <expr>
                      <assign-expr>
                      <cond-or-expr>
                       <cond-and-expr>
                        <equality-expr>
                         <relational-expr>
                          <additive-expr>
                           <multiplicative-expr>
                            <unary-expr>
                             <primary-expr>
                             <identifier>
                              j
                             <primary-expr-t>
                            <multiplicative-expr-t>
                           <additive-expr-t>
                          <relational-expr-t>
                         <equality-expr-t>
                        <cond-and-expr-t>
                       <cond-or-expr-t>
                      <assign-expr-t>
                     <proper-arg-list-t>
                    )
                   <multiplicative-expr-t>
                  <additive-expr-t>
                 <relational-expr-t>
                <equality-expr-t>
               <cond-and-expr-t>
              <cond-or-expr-t>
             <assign-expr-t>
            <proper-arg-list-t>
           )
          <multiplicative-expr-t>
         <additive-expr-t>
        <relational-expr-t>
       <equality-expr-t>
      <cond-and-expr-t>
     <cond-or-expr-t>
    <assign-expr-t>
   ;
  <stmt-list>
 }
